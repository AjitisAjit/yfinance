{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Yahoo! Finance market data downloader Ever since Yahoo! finance decommissioned their historical data API, many programs that relied on it to stop working. yfinance aims to solve this problem by offering a reliable, threaded, and Pythonic way to download historical market data from Yahoo! finance. NOTE The library was originally named fix-yahoo-finance , but I've since renamed it to yfinance as I no longer consider it a mere \"fix\". For reasons of backward-compatibility, fix-yahoo-finance now import and uses yfinance , but you should install and use yfinance directly.","title":"Introduction"},{"location":"#yahoo-finance-market-data-downloader","text":"Ever since Yahoo! finance decommissioned their historical data API, many programs that relied on it to stop working. yfinance aims to solve this problem by offering a reliable, threaded, and Pythonic way to download historical market data from Yahoo! finance.","title":"Yahoo! Finance market data downloader"},{"location":"#note","text":"The library was originally named fix-yahoo-finance , but I've since renamed it to yfinance as I no longer consider it a mere \"fix\". For reasons of backward-compatibility, fix-yahoo-finance now import and uses yfinance , but you should install and use yfinance directly.","title":"NOTE"},{"location":"Ticker/","text":"Ticker","title":"Ticker"},{"location":"Ticker/#ticker","text":"","title":"Ticker"},{"location":"Ticker/#yfinance.ticker.Ticker","text":"","title":"yfinance.ticker.Ticker"},{"location":"TickerBase/","text":"TickerBase Reference history ( self , period = '1mo' , interval = '1d' , start = None , end = None , prepost = False , actions = True , auto_adjust = True , back_adjust = False , proxy = None , rounding = False , tz = None , ** kwargs ) :Parameters: period : str Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max Either Use period parameter or use start and end interval : str Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo Intraday data cannot extend last 60 days !!! start \"str\" Download start date string (YYYY-MM-DD) or _datetime. Default is 1900-01-01 !!! end \"str\" Download end date string (YYYY-MM-DD) or _datetime. Default is now prepost : bool Include Pre and Post market data in results? Default is False !!! auto_adjust \"bool\" Adjust all OHLC automatically? Default is True !!! back_adjust \"bool\" Back-adjusted data to mimic true historical prices !!! proxy \"str\" Optional. Proxy server URL scheme. Default is None !!! rounding \"bool\" Round values to 2 decimal places? Optional. Default is False = precision suggested by Yahoo! !!! tz \"str\" Optional timezone locale for dates. (default data is returned as non-localized dates) **kwargs: dict !!! debug \"bool\" Optional. If passed as False, will suppress error message printing to console. Source code in yfinance/base.py def history ( self , period = \"1mo\" , interval = \"1d\" , start = None , end = None , prepost = False , actions = True , auto_adjust = True , back_adjust = False , proxy = None , rounding = False , tz = None , ** kwargs ): \"\"\" :Parameters: period : str Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max Either Use period parameter or use start and end interval : str Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo Intraday data cannot extend last 60 days start: str Download start date string (YYYY-MM-DD) or _datetime. Default is 1900-01-01 end: str Download end date string (YYYY-MM-DD) or _datetime. Default is now prepost : bool Include Pre and Post market data in results? Default is False auto_adjust: bool Adjust all OHLC automatically? Default is True back_adjust: bool Back-adjusted data to mimic true historical prices proxy: str Optional. Proxy server URL scheme. Default is None rounding: bool Round values to 2 decimal places? Optional. Default is False = precision suggested by Yahoo! tz: str Optional timezone locale for dates. (default data is returned as non-localized dates) **kwargs: dict debug: bool Optional. If passed as False, will suppress error message printing to console. \"\"\" if start or period is None or period . lower () == \"max\" : if start is None : start = - 2208988800 elif isinstance ( start , _datetime . datetime ): start = int ( _time . mktime ( start . timetuple ())) else : start = int ( _time . mktime ( _time . strptime ( str ( start ), '%Y-%m- %d ' ))) if end is None : end = int ( _time . time ()) elif isinstance ( end , _datetime . datetime ): end = int ( _time . mktime ( end . timetuple ())) else : end = int ( _time . mktime ( _time . strptime ( str ( end ), '%Y-%m- %d ' ))) params = { \"period1\" : start , \"period2\" : end } else : period = period . lower () params = { \"range\" : period } params [ \"interval\" ] = interval . lower () params [ \"includePrePost\" ] = prepost params [ \"events\" ] = \"div,splits\" # 1) fix weired bug with Yahoo! - returning 60m for 30m bars if params [ \"interval\" ] == \"30m\" : params [ \"interval\" ] = \"15m\" # setup proxy in requests format if proxy is not None : if isinstance ( proxy , dict ) and \"https\" in proxy : proxy = proxy [ \"https\" ] proxy = { \"https\" : proxy } # Getting data from json url = \" {} /v8/finance/chart/ {} \" . format ( self . _base_url , self . ticker ) data = self . session . get ( url = url , params = params , proxies = proxy ) if \"Will be right back\" in data . text : raise RuntimeError ( \"*** YAHOO! FINANCE IS CURRENTLY DOWN! *** \\n \" \"Our engineers are working quickly to resolve \" \"the issue. Thank you for your patience.\" ) data = data . json () # Work with errors debug_mode = True if \"debug\" in kwargs and isinstance ( kwargs [ \"debug\" ], bool ): debug_mode = kwargs [ \"debug\" ] err_msg = \"No data found for this date range, symbol may be delisted\" if \"chart\" in data and data [ \"chart\" ][ \"error\" ]: err_msg = data [ \"chart\" ][ \"error\" ][ \"description\" ] shared . _DFS [ self . ticker ] = utils . empty_df () shared . _ERRORS [ self . ticker ] = err_msg if \"many\" not in kwargs and debug_mode : print ( '- %s : %s ' % ( self . ticker , err_msg )) return shared . _DFS [ self . ticker ] elif \"chart\" not in data or data [ \"chart\" ][ \"result\" ] is None or \\ not data [ \"chart\" ][ \"result\" ]: shared . _DFS [ self . ticker ] = utils . empty_df () shared . _ERRORS [ self . ticker ] = err_msg if \"many\" not in kwargs and debug_mode : print ( '- %s : %s ' % ( self . ticker , err_msg )) return shared . _DFS [ self . ticker ] # parse quotes try : quotes = utils . parse_quotes ( data [ \"chart\" ][ \"result\" ][ 0 ], tz ) except Exception : shared . _DFS [ self . ticker ] = utils . empty_df () shared . _ERRORS [ self . ticker ] = err_msg if \"many\" not in kwargs and debug_mode : print ( '- %s : %s ' % ( self . ticker , err_msg )) return shared . _DFS [ self . ticker ] # 2) fix weired bug with Yahoo! - returning 60m for 30m bars if interval . lower () == \"30m\" : quotes2 = quotes . resample ( '30T' ) quotes = _pd . DataFrame ( index = quotes2 . last () . index , data = { 'Open' : quotes2 [ 'Open' ] . first (), 'High' : quotes2 [ 'High' ] . max (), 'Low' : quotes2 [ 'Low' ] . min (), 'Close' : quotes2 [ 'Close' ] . last (), 'Adj Close' : quotes2 [ 'Adj Close' ] . last (), 'Volume' : quotes2 [ 'Volume' ] . sum () }) try : quotes [ 'Dividends' ] = quotes2 [ 'Dividends' ] . max () except Exception : pass try : quotes [ 'Stock Splits' ] = quotes2 [ 'Dividends' ] . max () except Exception : pass if auto_adjust : quotes = utils . auto_adjust ( quotes ) elif back_adjust : quotes = utils . back_adjust ( quotes ) if rounding : quotes = _np . round ( quotes , data [ \"chart\" ][ \"result\" ][ 0 ][ \"meta\" ][ \"priceHint\" ]) quotes [ 'Volume' ] = quotes [ 'Volume' ] . fillna ( 0 ) . astype ( _np . int64 ) quotes . dropna ( inplace = True ) # actions dividends , splits = utils . parse_actions ( data [ \"chart\" ][ \"result\" ][ 0 ], tz ) # combine df = _pd . concat ([ quotes , dividends , splits ], axis = 1 , sort = True ) df [ \"Dividends\" ] . fillna ( 0 , inplace = True ) df [ \"Stock Splits\" ] . fillna ( 0 , inplace = True ) # index eod/intraday df . index = df . index . tz_localize ( \"UTC\" ) . tz_convert ( data [ \"chart\" ][ \"result\" ][ 0 ][ \"meta\" ][ \"exchangeTimezoneName\" ]) if params [ \"interval\" ][ - 1 ] == \"m\" : df . index . name = \"Datetime\" elif params [ \"interval\" ] == \"1h\" : pass else : df . index = _pd . to_datetime ( df . index . date ) if tz is not None : df . index = df . index . tz_localize ( tz ) df . index . name = \"Date\" self . _history = df . copy () if not actions : df . drop ( columns = [ \"Dividends\" , \"Stock Splits\" ], inplace = True ) return df","title":"TickerBase"},{"location":"TickerBase/#tickerbase-reference","text":"","title":"TickerBase Reference"},{"location":"TickerBase/#yfinance.base.TickerBase","text":"","title":"yfinance.base.TickerBase"},{"location":"TickerBase/#yfinance.base.TickerBase.history","text":":Parameters: period : str Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max Either Use period parameter or use start and end interval : str Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo Intraday data cannot extend last 60 days !!! start \"str\" Download start date string (YYYY-MM-DD) or _datetime. Default is 1900-01-01 !!! end \"str\" Download end date string (YYYY-MM-DD) or _datetime. Default is now prepost : bool Include Pre and Post market data in results? Default is False !!! auto_adjust \"bool\" Adjust all OHLC automatically? Default is True !!! back_adjust \"bool\" Back-adjusted data to mimic true historical prices !!! proxy \"str\" Optional. Proxy server URL scheme. Default is None !!! rounding \"bool\" Round values to 2 decimal places? Optional. Default is False = precision suggested by Yahoo! !!! tz \"str\" Optional timezone locale for dates. (default data is returned as non-localized dates) **kwargs: dict !!! debug \"bool\" Optional. If passed as False, will suppress error message printing to console. Source code in yfinance/base.py def history ( self , period = \"1mo\" , interval = \"1d\" , start = None , end = None , prepost = False , actions = True , auto_adjust = True , back_adjust = False , proxy = None , rounding = False , tz = None , ** kwargs ): \"\"\" :Parameters: period : str Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max Either Use period parameter or use start and end interval : str Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo Intraday data cannot extend last 60 days start: str Download start date string (YYYY-MM-DD) or _datetime. Default is 1900-01-01 end: str Download end date string (YYYY-MM-DD) or _datetime. Default is now prepost : bool Include Pre and Post market data in results? Default is False auto_adjust: bool Adjust all OHLC automatically? Default is True back_adjust: bool Back-adjusted data to mimic true historical prices proxy: str Optional. Proxy server URL scheme. Default is None rounding: bool Round values to 2 decimal places? Optional. Default is False = precision suggested by Yahoo! tz: str Optional timezone locale for dates. (default data is returned as non-localized dates) **kwargs: dict debug: bool Optional. If passed as False, will suppress error message printing to console. \"\"\" if start or period is None or period . lower () == \"max\" : if start is None : start = - 2208988800 elif isinstance ( start , _datetime . datetime ): start = int ( _time . mktime ( start . timetuple ())) else : start = int ( _time . mktime ( _time . strptime ( str ( start ), '%Y-%m- %d ' ))) if end is None : end = int ( _time . time ()) elif isinstance ( end , _datetime . datetime ): end = int ( _time . mktime ( end . timetuple ())) else : end = int ( _time . mktime ( _time . strptime ( str ( end ), '%Y-%m- %d ' ))) params = { \"period1\" : start , \"period2\" : end } else : period = period . lower () params = { \"range\" : period } params [ \"interval\" ] = interval . lower () params [ \"includePrePost\" ] = prepost params [ \"events\" ] = \"div,splits\" # 1) fix weired bug with Yahoo! - returning 60m for 30m bars if params [ \"interval\" ] == \"30m\" : params [ \"interval\" ] = \"15m\" # setup proxy in requests format if proxy is not None : if isinstance ( proxy , dict ) and \"https\" in proxy : proxy = proxy [ \"https\" ] proxy = { \"https\" : proxy } # Getting data from json url = \" {} /v8/finance/chart/ {} \" . format ( self . _base_url , self . ticker ) data = self . session . get ( url = url , params = params , proxies = proxy ) if \"Will be right back\" in data . text : raise RuntimeError ( \"*** YAHOO! FINANCE IS CURRENTLY DOWN! *** \\n \" \"Our engineers are working quickly to resolve \" \"the issue. Thank you for your patience.\" ) data = data . json () # Work with errors debug_mode = True if \"debug\" in kwargs and isinstance ( kwargs [ \"debug\" ], bool ): debug_mode = kwargs [ \"debug\" ] err_msg = \"No data found for this date range, symbol may be delisted\" if \"chart\" in data and data [ \"chart\" ][ \"error\" ]: err_msg = data [ \"chart\" ][ \"error\" ][ \"description\" ] shared . _DFS [ self . ticker ] = utils . empty_df () shared . _ERRORS [ self . ticker ] = err_msg if \"many\" not in kwargs and debug_mode : print ( '- %s : %s ' % ( self . ticker , err_msg )) return shared . _DFS [ self . ticker ] elif \"chart\" not in data or data [ \"chart\" ][ \"result\" ] is None or \\ not data [ \"chart\" ][ \"result\" ]: shared . _DFS [ self . ticker ] = utils . empty_df () shared . _ERRORS [ self . ticker ] = err_msg if \"many\" not in kwargs and debug_mode : print ( '- %s : %s ' % ( self . ticker , err_msg )) return shared . _DFS [ self . ticker ] # parse quotes try : quotes = utils . parse_quotes ( data [ \"chart\" ][ \"result\" ][ 0 ], tz ) except Exception : shared . _DFS [ self . ticker ] = utils . empty_df () shared . _ERRORS [ self . ticker ] = err_msg if \"many\" not in kwargs and debug_mode : print ( '- %s : %s ' % ( self . ticker , err_msg )) return shared . _DFS [ self . ticker ] # 2) fix weired bug with Yahoo! - returning 60m for 30m bars if interval . lower () == \"30m\" : quotes2 = quotes . resample ( '30T' ) quotes = _pd . DataFrame ( index = quotes2 . last () . index , data = { 'Open' : quotes2 [ 'Open' ] . first (), 'High' : quotes2 [ 'High' ] . max (), 'Low' : quotes2 [ 'Low' ] . min (), 'Close' : quotes2 [ 'Close' ] . last (), 'Adj Close' : quotes2 [ 'Adj Close' ] . last (), 'Volume' : quotes2 [ 'Volume' ] . sum () }) try : quotes [ 'Dividends' ] = quotes2 [ 'Dividends' ] . max () except Exception : pass try : quotes [ 'Stock Splits' ] = quotes2 [ 'Dividends' ] . max () except Exception : pass if auto_adjust : quotes = utils . auto_adjust ( quotes ) elif back_adjust : quotes = utils . back_adjust ( quotes ) if rounding : quotes = _np . round ( quotes , data [ \"chart\" ][ \"result\" ][ 0 ][ \"meta\" ][ \"priceHint\" ]) quotes [ 'Volume' ] = quotes [ 'Volume' ] . fillna ( 0 ) . astype ( _np . int64 ) quotes . dropna ( inplace = True ) # actions dividends , splits = utils . parse_actions ( data [ \"chart\" ][ \"result\" ][ 0 ], tz ) # combine df = _pd . concat ([ quotes , dividends , splits ], axis = 1 , sort = True ) df [ \"Dividends\" ] . fillna ( 0 , inplace = True ) df [ \"Stock Splits\" ] . fillna ( 0 , inplace = True ) # index eod/intraday df . index = df . index . tz_localize ( \"UTC\" ) . tz_convert ( data [ \"chart\" ][ \"result\" ][ 0 ][ \"meta\" ][ \"exchangeTimezoneName\" ]) if params [ \"interval\" ][ - 1 ] == \"m\" : df . index . name = \"Datetime\" elif params [ \"interval\" ] == \"1h\" : pass else : df . index = _pd . to_datetime ( df . index . date ) if tz is not None : df . index = df . index . tz_localize ( tz ) df . index . name = \"Date\" self . _history = df . copy () if not actions : df . drop ( columns = [ \"Dividends\" , \"Stock Splits\" ], inplace = True ) return df","title":"history()"},{"location":"Tickers/","text":"Tickers Reference","title":"Tickers Reference"},{"location":"Tickers/#tickers-reference","text":"","title":"Tickers Reference"},{"location":"Tickers/#yfinance.tickers.Tickers","text":"","title":"yfinance.tickers.Tickers"},{"location":"installation/","text":"Installation Install yfinance using pip : $ pip install yfinance --upgrade --no-cache-dir Install yfinance using conda : $ conda install -c ranaroussi yfinance Requirements Python >= 2.7, 3.4+ Pandas (tested to work with >=0.23.1) Numpy >= 1.11.1 requests >= 2.14.2 lxml >= 4.5.1 Optional (if you want to use pandas_datareader ) pandas_datareader >= 0.4.0","title":"Installation"},{"location":"installation/#installation","text":"Install yfinance using pip : $ pip install yfinance --upgrade --no-cache-dir Install yfinance using conda : $ conda install -c ranaroussi yfinance","title":"Installation"},{"location":"installation/#requirements","text":"Python >= 2.7, 3.4+ Pandas (tested to work with >=0.23.1) Numpy >= 1.11.1 requests >= 2.14.2 lxml >= 4.5.1","title":"Requirements"},{"location":"installation/#optional-if-you-want-to-use-pandas_datareader","text":"pandas_datareader >= 0.4.0","title":"Optional (if you want to use pandas_datareader)"},{"location":"multi/","text":"multi.py Reference download ( tickers , start = None , end = None , actions = False , threads = True , group_by = 'column' , auto_adjust = False , back_adjust = False , progress = True , period = 'max' , show_errors = True , interval = '1d' , prepost = False , proxy = None , rounding = False , ** kwargs ) Download yahoo tickers :Parameters: tickers : str, list List of tickers to download period : str Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max Either Use period parameter or use start and end interval : str Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo Intraday data cannot extend last 60 days !!! start \"str\" Download start date string (YYYY-MM-DD) or _datetime. Default is 1900-01-01 !!! end \"str\" Download end date string (YYYY-MM-DD) or _datetime. Default is now group_by : str Group by 'ticker' or 'column' (default) prepost : bool Include Pre and Post market data in results? Default is False !!! auto_adjust \"bool\" Adjust all OHLC automatically? Default is False !!! actions \"bool\" Download dividend + stock splits data. Default is False !!! threads \"bool / int\" How many threads to use for mass downloading. Default is True !!! proxy \"str\" Optional. Proxy server URL scheme. Default is None !!! rounding \"bool\" Optional. Round values to 2 decimal places? !!! show_errors \"bool\" Optional. Doesn't print errors if True Source code in yfinance/multi.py def download ( tickers , start = None , end = None , actions = False , threads = True , group_by = 'column' , auto_adjust = False , back_adjust = False , progress = True , period = \"max\" , show_errors = True , interval = \"1d\" , prepost = False , proxy = None , rounding = False , ** kwargs ): \"\"\"Download yahoo tickers :Parameters: tickers : str, list List of tickers to download period : str Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max Either Use period parameter or use start and end interval : str Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo Intraday data cannot extend last 60 days start: str Download start date string (YYYY-MM-DD) or _datetime. Default is 1900-01-01 end: str Download end date string (YYYY-MM-DD) or _datetime. Default is now group_by : str Group by 'ticker' or 'column' (default) prepost : bool Include Pre and Post market data in results? Default is False auto_adjust: bool Adjust all OHLC automatically? Default is False actions: bool Download dividend + stock splits data. Default is False threads: bool / int How many threads to use for mass downloading. Default is True proxy: str Optional. Proxy server URL scheme. Default is None rounding: bool Optional. Round values to 2 decimal places? show_errors: bool Optional. Doesn't print errors if True \"\"\" # create ticker list tickers = tickers if isinstance ( tickers , ( list , set , tuple )) else tickers . replace ( ',' , ' ' ) . split () tickers = list ( set ([ ticker . upper () for ticker in tickers ])) if progress : shared . _PROGRESS_BAR = utils . ProgressBar ( len ( tickers ), 'completed' ) # reset shared._DFS shared . _DFS = {} shared . _ERRORS = {} # download using threads if threads : if threads is True : threads = min ([ len ( tickers ), _multitasking . cpu_count () * 2 ]) _multitasking . set_max_threads ( threads ) for i , ticker in enumerate ( tickers ): _download_one_threaded ( ticker , period = period , interval = interval , start = start , end = end , prepost = prepost , actions = actions , auto_adjust = auto_adjust , back_adjust = back_adjust , progress = ( progress and i > 0 ), proxy = proxy , rounding = rounding ) while len ( shared . _DFS ) < len ( tickers ): _time . sleep ( 0.01 ) # download synchronously else : for i , ticker in enumerate ( tickers ): data = _download_one ( ticker , period = period , interval = interval , start = start , end = end , prepost = prepost , actions = actions , auto_adjust = auto_adjust , back_adjust = back_adjust , proxy = proxy , rounding = rounding ) shared . _DFS [ ticker . upper ()] = data if progress : shared . _PROGRESS_BAR . animate () if progress : shared . _PROGRESS_BAR . completed () if shared . _ERRORS and show_errors : print ( ' \\n %.f Failed download %s :' % ( len ( shared . _ERRORS ), 's' if len ( shared . _ERRORS ) > 1 else '' )) # print(shared._ERRORS) print ( \" \\n \" . join ([ '- %s : %s ' % v for v in list ( shared . _ERRORS . items ())])) if len ( tickers ) == 1 : return shared . _DFS [ tickers [ 0 ]] try : data = _pd . concat ( shared . _DFS . values (), axis = 1 , keys = shared . _DFS . keys ()) except Exception : _realign_dfs () data = _pd . concat ( shared . _DFS . values (), axis = 1 , keys = shared . _DFS . keys ()) if group_by == 'column' : data . columns = data . columns . swaplevel ( 0 , 1 ) data . sort_index ( level = 0 , axis = 1 , inplace = True ) return data","title":"multi"},{"location":"multi/#multipy-reference","text":"","title":"multi.py Reference"},{"location":"multi/#yfinance.multi","text":"","title":"yfinance.multi"},{"location":"multi/#yfinance.multi.download","text":"Download yahoo tickers :Parameters: tickers : str, list List of tickers to download period : str Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max Either Use period parameter or use start and end interval : str Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo Intraday data cannot extend last 60 days !!! start \"str\" Download start date string (YYYY-MM-DD) or _datetime. Default is 1900-01-01 !!! end \"str\" Download end date string (YYYY-MM-DD) or _datetime. Default is now group_by : str Group by 'ticker' or 'column' (default) prepost : bool Include Pre and Post market data in results? Default is False !!! auto_adjust \"bool\" Adjust all OHLC automatically? Default is False !!! actions \"bool\" Download dividend + stock splits data. Default is False !!! threads \"bool / int\" How many threads to use for mass downloading. Default is True !!! proxy \"str\" Optional. Proxy server URL scheme. Default is None !!! rounding \"bool\" Optional. Round values to 2 decimal places? !!! show_errors \"bool\" Optional. Doesn't print errors if True Source code in yfinance/multi.py def download ( tickers , start = None , end = None , actions = False , threads = True , group_by = 'column' , auto_adjust = False , back_adjust = False , progress = True , period = \"max\" , show_errors = True , interval = \"1d\" , prepost = False , proxy = None , rounding = False , ** kwargs ): \"\"\"Download yahoo tickers :Parameters: tickers : str, list List of tickers to download period : str Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max Either Use period parameter or use start and end interval : str Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo Intraday data cannot extend last 60 days start: str Download start date string (YYYY-MM-DD) or _datetime. Default is 1900-01-01 end: str Download end date string (YYYY-MM-DD) or _datetime. Default is now group_by : str Group by 'ticker' or 'column' (default) prepost : bool Include Pre and Post market data in results? Default is False auto_adjust: bool Adjust all OHLC automatically? Default is False actions: bool Download dividend + stock splits data. Default is False threads: bool / int How many threads to use for mass downloading. Default is True proxy: str Optional. Proxy server URL scheme. Default is None rounding: bool Optional. Round values to 2 decimal places? show_errors: bool Optional. Doesn't print errors if True \"\"\" # create ticker list tickers = tickers if isinstance ( tickers , ( list , set , tuple )) else tickers . replace ( ',' , ' ' ) . split () tickers = list ( set ([ ticker . upper () for ticker in tickers ])) if progress : shared . _PROGRESS_BAR = utils . ProgressBar ( len ( tickers ), 'completed' ) # reset shared._DFS shared . _DFS = {} shared . _ERRORS = {} # download using threads if threads : if threads is True : threads = min ([ len ( tickers ), _multitasking . cpu_count () * 2 ]) _multitasking . set_max_threads ( threads ) for i , ticker in enumerate ( tickers ): _download_one_threaded ( ticker , period = period , interval = interval , start = start , end = end , prepost = prepost , actions = actions , auto_adjust = auto_adjust , back_adjust = back_adjust , progress = ( progress and i > 0 ), proxy = proxy , rounding = rounding ) while len ( shared . _DFS ) < len ( tickers ): _time . sleep ( 0.01 ) # download synchronously else : for i , ticker in enumerate ( tickers ): data = _download_one ( ticker , period = period , interval = interval , start = start , end = end , prepost = prepost , actions = actions , auto_adjust = auto_adjust , back_adjust = back_adjust , proxy = proxy , rounding = rounding ) shared . _DFS [ ticker . upper ()] = data if progress : shared . _PROGRESS_BAR . animate () if progress : shared . _PROGRESS_BAR . completed () if shared . _ERRORS and show_errors : print ( ' \\n %.f Failed download %s :' % ( len ( shared . _ERRORS ), 's' if len ( shared . _ERRORS ) > 1 else '' )) # print(shared._ERRORS) print ( \" \\n \" . join ([ '- %s : %s ' % v for v in list ( shared . _ERRORS . items ())])) if len ( tickers ) == 1 : return shared . _DFS [ tickers [ 0 ]] try : data = _pd . concat ( shared . _DFS . values (), axis = 1 , keys = shared . _DFS . keys ()) except Exception : _realign_dfs () data = _pd . concat ( shared . _DFS . values (), axis = 1 , keys = shared . _DFS . keys ()) if group_by == 'column' : data . columns = data . columns . swaplevel ( 0 , 1 ) data . sort_index ( level = 0 , axis = 1 , inplace = True ) return data","title":"download()"},{"location":"quickstart/","text":"Quick Start The Ticker module The Ticker module, which allows you to access ticker data in a more Pythonic way: Note: yahoo finance datetimes are received as UTC. import yfinance as yf msft = yf.Ticker(\"MSFT\") # get stock info msft.info # get historical market data hist = msft.history(period=\"max\") # show actions (dividends, splits) msft.actions # show dividends msft.dividends # show splits msft.splits # show financials msft.financials msft.quarterly_financials # show major holders msft.major_holders # show institutional holders msft.institutional_holders # show balance sheet msft.balance_sheet msft.quarterly_balance_sheet # show cashflow msft.cashflow msft.quarterly_cashflow # show earnings msft.earnings msft.quarterly_earnings # show sustainability msft.sustainability # show analysts recommendations msft.recommendations # show next event (earnings, etc) msft.calendar # show ISIN code - *experimental* # ISIN = International Securities Identification Number msft.isin # show options expirations msft.options # get option chain for specific expiration opt = msft.option_chain('YYYY-MM-DD') # data available via: opt.calls, opt.puts If you want to use a proxy server for downloading data, use: import yfinance as yf msft = yf.Ticker(\"MSFT\") msft.history(..., proxy=\"PROXY_SERVER\") msft.get_actions(proxy=\"PROXY_SERVER\") msft.get_dividends(proxy=\"PROXY_SERVER\") msft.get_splits(proxy=\"PROXY_SERVER\") msft.get_balance_sheet(proxy=\"PROXY_SERVER\") msft.get_cashflow(proxy=\"PROXY_SERVER\") msft.option_chain(..., proxy=\"PROXY_SERVER\") ... To use a custom requests session (for example to cache calls to the API or customize the User-agent header), pass a session= argument to the Ticker constructor. import requests_cache session = requests_cache.CachedSession('yfinance.cache') session.headers['User-agent'] = 'my-program/1.0' ticker = yf.Ticker('msft aapl goog', session=session) # The scraped response will be stored in the cache ticker.actions To initialize multiple Ticker objects, use import yfinance as yf tickers = yf.Tickers('msft aapl goog') # ^ returns a named tuple of Ticker objects # access each ticker using (example) tickers.tickers.MSFT.info tickers.tickers.AAPL.history(period=\"1mo\") tickers.tickers.GOOG.actions Fetching data for multiple tickers import yfinance as yf data = yf.download(\"SPY AAPL\", start=\"2017-01-01\", end=\"2017-04-30\") I've also added some options to make life easier :) data = yf.download( # or pdr.get_data_yahoo(... # tickers list or string as well tickers = \"SPY AAPL MSFT\", # use \"period\" instead of start/end # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max # (optional, default is '1mo') period = \"ytd\", # fetch data by interval (including intraday if period < 60 days) # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo # (optional, default is '1d') interval = \"1m\", # group by ticker (to access via data['SPY']) # (optional, default is 'column') group_by = 'ticker', # adjust all OHLC automatically # (optional, default is False) auto_adjust = True, # download pre/post regular market hours data # (optional, default is False) prepost = True, # use threads for mass downloading? (True/False/Integer) # (optional, default is True) threads = True, # proxy URL scheme use use when downloading? # (optional, default is None) proxy = None ) Managing Multi-Level Columns The following answer on Stack Overflow is for How to deal with multi-level column names downloaded with yfinance? yfinance returns a pandas.DataFrame with multi-level column names, with a level for the ticker and a level for the stock price data The answer discusses: How to correctly read the the multi-level columns after saving the dataframe to a csv with pandas.DataFrame.to_csv How to download single or multiple tickers into a single dataframe with single level column names and a ticker column pandas_datareader override If your code uses pandas_datareader and you want to download data faster, you can \"hijack\" pandas_datareader.data.get_data_yahoo() method to use yfinance while making sure the returned data is in the same format as pandas_datareader 's get_data_yahoo() . from pandas_datareader import data as pdr import yfinance as yf yf.pdr_override() # <== that's all it takes :-) # download dataframe data = pdr.get_data_yahoo(\"SPY\", start=\"2017-01-01\", end=\"2017-04-30\")","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"","title":"Quick Start"},{"location":"quickstart/#the-ticker-module","text":"The Ticker module, which allows you to access ticker data in a more Pythonic way: Note: yahoo finance datetimes are received as UTC. import yfinance as yf msft = yf.Ticker(\"MSFT\") # get stock info msft.info # get historical market data hist = msft.history(period=\"max\") # show actions (dividends, splits) msft.actions # show dividends msft.dividends # show splits msft.splits # show financials msft.financials msft.quarterly_financials # show major holders msft.major_holders # show institutional holders msft.institutional_holders # show balance sheet msft.balance_sheet msft.quarterly_balance_sheet # show cashflow msft.cashflow msft.quarterly_cashflow # show earnings msft.earnings msft.quarterly_earnings # show sustainability msft.sustainability # show analysts recommendations msft.recommendations # show next event (earnings, etc) msft.calendar # show ISIN code - *experimental* # ISIN = International Securities Identification Number msft.isin # show options expirations msft.options # get option chain for specific expiration opt = msft.option_chain('YYYY-MM-DD') # data available via: opt.calls, opt.puts If you want to use a proxy server for downloading data, use: import yfinance as yf msft = yf.Ticker(\"MSFT\") msft.history(..., proxy=\"PROXY_SERVER\") msft.get_actions(proxy=\"PROXY_SERVER\") msft.get_dividends(proxy=\"PROXY_SERVER\") msft.get_splits(proxy=\"PROXY_SERVER\") msft.get_balance_sheet(proxy=\"PROXY_SERVER\") msft.get_cashflow(proxy=\"PROXY_SERVER\") msft.option_chain(..., proxy=\"PROXY_SERVER\") ... To use a custom requests session (for example to cache calls to the API or customize the User-agent header), pass a session= argument to the Ticker constructor. import requests_cache session = requests_cache.CachedSession('yfinance.cache') session.headers['User-agent'] = 'my-program/1.0' ticker = yf.Ticker('msft aapl goog', session=session) # The scraped response will be stored in the cache ticker.actions To initialize multiple Ticker objects, use import yfinance as yf tickers = yf.Tickers('msft aapl goog') # ^ returns a named tuple of Ticker objects # access each ticker using (example) tickers.tickers.MSFT.info tickers.tickers.AAPL.history(period=\"1mo\") tickers.tickers.GOOG.actions","title":"The Ticker module"},{"location":"quickstart/#fetching-data-for-multiple-tickers","text":"import yfinance as yf data = yf.download(\"SPY AAPL\", start=\"2017-01-01\", end=\"2017-04-30\") I've also added some options to make life easier :) data = yf.download( # or pdr.get_data_yahoo(... # tickers list or string as well tickers = \"SPY AAPL MSFT\", # use \"period\" instead of start/end # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max # (optional, default is '1mo') period = \"ytd\", # fetch data by interval (including intraday if period < 60 days) # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo # (optional, default is '1d') interval = \"1m\", # group by ticker (to access via data['SPY']) # (optional, default is 'column') group_by = 'ticker', # adjust all OHLC automatically # (optional, default is False) auto_adjust = True, # download pre/post regular market hours data # (optional, default is False) prepost = True, # use threads for mass downloading? (True/False/Integer) # (optional, default is True) threads = True, # proxy URL scheme use use when downloading? # (optional, default is None) proxy = None )","title":"Fetching data for multiple tickers"},{"location":"quickstart/#managing-multi-level-columns","text":"The following answer on Stack Overflow is for How to deal with multi-level column names downloaded with yfinance? yfinance returns a pandas.DataFrame with multi-level column names, with a level for the ticker and a level for the stock price data The answer discusses: How to correctly read the the multi-level columns after saving the dataframe to a csv with pandas.DataFrame.to_csv How to download single or multiple tickers into a single dataframe with single level column names and a ticker column","title":"Managing Multi-Level Columns"},{"location":"quickstart/#pandas_datareader-override","text":"If your code uses pandas_datareader and you want to download data faster, you can \"hijack\" pandas_datareader.data.get_data_yahoo() method to use yfinance while making sure the returned data is in the same format as pandas_datareader 's get_data_yahoo() . from pandas_datareader import data as pdr import yfinance as yf yf.pdr_override() # <== that's all it takes :-) # download dataframe data = pdr.get_data_yahoo(\"SPY\", start=\"2017-01-01\", end=\"2017-04-30\")","title":"pandas_datareader override"},{"location":"utils/","text":"utils.py Reference back_adjust ( data ) back-adjusted data to mimic true historical prices Source code in yfinance/utils.py def back_adjust ( data ): \"\"\" back-adjusted data to mimic true historical prices \"\"\" df = data . copy () ratio = df [ \"Adj Close\" ] / df [ \"Close\" ] df [ \"Adj Open\" ] = df [ \"Open\" ] * ratio df [ \"Adj High\" ] = df [ \"High\" ] * ratio df [ \"Adj Low\" ] = df [ \"Low\" ] * ratio df . drop ( [ \"Open\" , \"High\" , \"Low\" , \"Adj Close\" ], axis = 1 , inplace = True ) df . rename ( columns = { \"Adj Open\" : \"Open\" , \"Adj High\" : \"High\" , \"Adj Low\" : \"Low\" }, inplace = True ) return df [[ \"Open\" , \"High\" , \"Low\" , \"Close\" , \"Volume\" ]]","title":"utils"},{"location":"utils/#utilspy-reference","text":"","title":"utils.py Reference"},{"location":"utils/#yfinance.utils","text":"","title":"yfinance.utils"},{"location":"utils/#yfinance.utils.back_adjust","text":"back-adjusted data to mimic true historical prices Source code in yfinance/utils.py def back_adjust ( data ): \"\"\" back-adjusted data to mimic true historical prices \"\"\" df = data . copy () ratio = df [ \"Adj Close\" ] / df [ \"Close\" ] df [ \"Adj Open\" ] = df [ \"Open\" ] * ratio df [ \"Adj High\" ] = df [ \"High\" ] * ratio df [ \"Adj Low\" ] = df [ \"Low\" ] * ratio df . drop ( [ \"Open\" , \"High\" , \"Low\" , \"Adj Close\" ], axis = 1 , inplace = True ) df . rename ( columns = { \"Adj Open\" : \"Open\" , \"Adj High\" : \"High\" , \"Adj Low\" : \"Low\" }, inplace = True ) return df [[ \"Open\" , \"High\" , \"Low\" , \"Close\" , \"Volume\" ]]","title":"back_adjust()"}]}